// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Telemetry.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DotNet.Core.IotHub.Models.Protobuf {

  /// <summary>Holder for reflection information generated from Telemetry.proto</summary>
  public static partial class TelemetryReflection {

    #region Descriptor
    /// <summary>File descriptor for Telemetry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TelemetryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9UZWxlbWV0cnkucHJvdG8iagoRVGVsZW1ldHJ5UHJvdG9idWYSEwoLdGVt",
            "cGVyYXR1cmUYASABKAESEAoIaHVtaWRpdHkYAiABKAESEAoIcHJlc3N1cmUY",
            "AyABKAESDQoFbXNnSWQYBCABKAUSDQoFaW1hZ2UYBSABKAxCJaoCIkRvdE5l",
            "dC5Db3JlLklvdEh1Yi5Nb2RlbHMuUHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DotNet.Core.IotHub.Models.Protobuf.TelemetryProtobuf), global::DotNet.Core.IotHub.Models.Protobuf.TelemetryProtobuf.Parser, new[]{ "Temperature", "Humidity", "Pressure", "MsgId", "Image" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TelemetryProtobuf : pb::IMessage<TelemetryProtobuf> {
    private static readonly pb::MessageParser<TelemetryProtobuf> _parser = new pb::MessageParser<TelemetryProtobuf>(() => new TelemetryProtobuf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TelemetryProtobuf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DotNet.Core.IotHub.Models.Protobuf.TelemetryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryProtobuf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryProtobuf(TelemetryProtobuf other) : this() {
      temperature_ = other.temperature_;
      humidity_ = other.humidity_;
      pressure_ = other.pressure_;
      msgId_ = other.msgId_;
      image_ = other.image_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryProtobuf Clone() {
      return new TelemetryProtobuf(this);
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 1;
    private double temperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "humidity" field.</summary>
    public const int HumidityFieldNumber = 2;
    private double humidity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Humidity {
      get { return humidity_; }
      set {
        humidity_ = value;
      }
    }

    /// <summary>Field number for the "pressure" field.</summary>
    public const int PressureFieldNumber = 3;
    private double pressure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pressure {
      get { return pressure_; }
      set {
        pressure_ = value;
      }
    }

    /// <summary>Field number for the "msgId" field.</summary>
    public const int MsgIdFieldNumber = 4;
    private int msgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 5;
    private pb::ByteString image_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TelemetryProtobuf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TelemetryProtobuf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Temperature != other.Temperature) return false;
      if (Humidity != other.Humidity) return false;
      if (Pressure != other.Pressure) return false;
      if (MsgId != other.MsgId) return false;
      if (Image != other.Image) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Temperature != 0D) hash ^= Temperature.GetHashCode();
      if (Humidity != 0D) hash ^= Humidity.GetHashCode();
      if (Pressure != 0D) hash ^= Pressure.GetHashCode();
      if (MsgId != 0) hash ^= MsgId.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Temperature != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Temperature);
      }
      if (Humidity != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Humidity);
      }
      if (Pressure != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Pressure);
      }
      if (MsgId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MsgId);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Temperature != 0D) {
        size += 1 + 8;
      }
      if (Humidity != 0D) {
        size += 1 + 8;
      }
      if (Pressure != 0D) {
        size += 1 + 8;
      }
      if (MsgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgId);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TelemetryProtobuf other) {
      if (other == null) {
        return;
      }
      if (other.Temperature != 0D) {
        Temperature = other.Temperature;
      }
      if (other.Humidity != 0D) {
        Humidity = other.Humidity;
      }
      if (other.Pressure != 0D) {
        Pressure = other.Pressure;
      }
      if (other.MsgId != 0) {
        MsgId = other.MsgId;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Temperature = input.ReadDouble();
            break;
          }
          case 17: {
            Humidity = input.ReadDouble();
            break;
          }
          case 25: {
            Pressure = input.ReadDouble();
            break;
          }
          case 32: {
            MsgId = input.ReadInt32();
            break;
          }
          case 42: {
            Image = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
